Python学习笔记
 
1.Python的特点
简单易学：语法简洁，接近自然语言
开发效率高：代码量少，开发周期短
应用广泛：适用于Web开发、数据科学、人工智能等多个领域
跨平台：可在Windows、Mac、Linux等系统上运行
 
2. Python软件安装以及环境搭建，破解
在网上找了半天的资源终于找到了Pycharm破解和环境安装包下载（哭）
又调试了半天软件终于能用了
  
3. 我的第一个Python程序
print("Hello World!!!")
print() 函数用于输出内容到控制台
字符串需用英文引号包裹
 
Python的最最基础语法
 
1. 字面量与数据类型
字面量
代码中直接写出的固定值
常见类型：
整数： 10 、 -5 
浮点数： 3.14 、 -2.5 
字符串： "你好" 、 'Python' 
 
数据类型
 整数（int）：没有小数部分的数字
 浮点数（float）：带有小数部分的数字
 字符串（str）：用引号包围的字符序列
 布尔（bool）：True表真，False表示假
 其他类型：列表、元组、集合、字典（后续学习）
 
类型查看与转换
 
查看类型： type(数据) 
类型转换：
int(数据) ：转换为整数
float(数据) ：转换为浮点数
str(数据) ：转换为字符串
 
2. 注释
 单行注释
 以#开头，直到行尾
 例：#这是一个单行注释 
 
  多行注释
  用三个双引号 """ 包围
  例：
"""
这是一个
多行注释
"""

3. 变量
 变量定义
格式： 变量名 = 变量值 
例： name = "张三" ， age = 18 
 变量特点
  变量存储的数据可以改变
  变量无类型，数据有类型
  命名规则：
  由字母、数字、下划线组成
  不能以数字开头
  不能使用Python关键字
  建议使用小写字母和下划线（如 student_name ）
 
4. 运算符
 算术运算符
 
  + （加）、 - （减）、 * （乘）、 / （除）
  // （整除）、 % （取余）、 ** （幂运算）
 
  赋值运算符
 
  = （赋值）
 复合赋值： += 、 -= 、 *= 、 /= 等
 
5. 字符串操作
 *1 字符串定义
 
 单引号： 'hello' 
 双引号： "world" 
 三引号： """多行字符串""" 
 
 *2 字符串拼接
使用 + 号： "你好" + "世界" 
 
 *3 字符串格式化
占位符方式： "我叫%s，年龄%d" % ("张三", 18) 
f-string方式： f"我叫{name}，年龄{age}" 
 
 *4 字符串常用方法
  replace(old, new) ：替换字符串
  split(sep) ：分割字符串
  strip() ：去除首尾空格
  count(sub) ：统计子串出现次数
 
 流程控制语句
 
1. 判断语句
 
*1 if语句
if 条件:
    执行代码

  
*2 if else语句
if 条件:
    条件成立执行
else:
    条件不成立执行

  
*3 if elif else语句
if 条件1:
    执行1
elif 条件2:
    执行2
else:
    执行3

  
2. 循环语句
 
*1 while循环
while 条件:
    循环体
    条件更新

  
*2 for循环
for 变量 in 可迭代对象:
    循环体

  
*3 循环控制
 
break ：退出当前循环
continue ：跳过本次循环，继续下一次
else ：循环正常结束后执行

  
3. 循环嵌套
  
for i in range(1, 10):
    for j in range(1, i+1):
        print(f"{j}*{i}={i*j}", end="\t")
    print()

  
数据容器
 
1.列表（list）
 
*1 列表定义
 
 用方括号包围，元素用逗号分隔： [1, 2, 3] 
 
*2 列表操作
 
 索引访问： list[0] 
 增加元素： append() 、 insert() 
 删除元素： pop() 、 remove() 
 修改元素： list[0] = new_value 
 查找元素： index() 、 count() 
 
*3 列表遍历
for item in my_list:
    print(item)

  
2.元组（tuple）
 
*1 元组定义
 用圆括号包围，元素用逗号分隔： (1, 2, 3) 
 
*2 元组特点
 
 不可修改，适合存储不变数据
 访问方式与列表类似
 
3.集合（set）
 
*1 集合定义
 
 用花括号包围，元素唯一： {1, 2, 3} 
 
*2 集合操作
 
 增加元素： add() 
 删除元素： remove() 
 集合运算：并集、交集、差集
 
4.字典（dict）
 
*1 字典定义
 
键值对形式： {"name": "张三", "age": 18} 

*2 字典操作
 
访问值： dict["name"] 
添加/修改： dict["new_key"] = new_value 
删除： pop("key") 
遍历：
for key in my_dict:
    print(key, my_dict[key])
 
 
函数
 
1.函数定义
def 函数名(参数):
    """函数说明文档"""
    函数体
    return 返回值

2. 函数参数
 
*1 位置参数
def add(x, y):
    return x + y
add(1, 2)  # 3

*2 关键字参数
add(y=2, x=1)  # 3

      
*3 缺省参数
def greet(name, age=18):
    print(f"你好，{name}，年龄{age}")
greet("张三")  # 你好，张三，年龄18

      
*4 不定长参数
def sum_all(*args):
    total = 0
    for num in args:
        total += num
    return total
sum_all(1, 2, 3)  # 6

      
3.函数返回值
 
可返回多个值，用逗号分隔，返回元组
def divide(x, y):
    quotient = x // y
    remainder = x % y
    return quotient, remainder
q, r = divide(5, 2)  # q=2, r=1

4.匿名函数（lambda）
add = lambda x, y: x + y
add(1, 2)  # 3

  
  
案例
 
1. 猜数字游戏
import random

def guess_number():
    num = random.randint(1, 10)
    for i in range(3):
        guess = int(input("请猜一个1-10的数字："))
        if guess == num:
            print("恭喜你，猜对了！")
            return
        elif guess < num:
            print("猜小了，再试试")
        else:
            print("猜大了，再试试")
    print(f"游戏结束，正确数字是{num}")

guess_number()

      
2. 学生管理系统
students = []

def add_student():
    name = input("请输入学生姓名：")
    age = int(input("请输入学生年龄："))
    students.append({"name": name, "age": age})
    print(f"学生{name}添加成功")

def list_students():
    if not students:
        print("没有学生记录")
        return
    print("学生列表：")
    for i, student in enumerate(students, 1):
        print(f"{i}. {student['name']}，年龄{student['age']}")

def main():
    while True:
        print("\n学生管理系统")
        print("1. 添加学生")
        print("2. 查看学生")
        print("3. 退出系统")
        choice = input("请选择操作：")
        if choice == "1":
            add_student()
        elif choice == "2":
            list_students()
        elif choice == "3":
            print("感谢使用，再见！")
            break
        else:
            print("无效选择，请重试")

main()


还需要找更多的资源练习
